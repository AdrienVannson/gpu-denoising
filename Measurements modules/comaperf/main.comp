#version 460
#extension GL_KHR_memory_scope_semantics: enable
#extension GL_NV_cooperative_matrix: enable
#extension GL_EXT_shader_explicit_arithmetic_types_float16: enable
#extension GL_EXT_control_flow_attributes: enable
layout(local_size_x = 32, local_size_y = 16, local_size_z = 1) in;

layout(set = 1, binding = 0) uniform sampler2D img_in;
layout(set = 1, binding = 1) uniform writeonly image2D img_out;

fcoopmatNV<16, gl_ScopeSubgroup, 16, 16> A, B, C;

void main()
{
    ivec2 ipos = ivec2(gl_GlobalInvocationID);

    A = fcoopmatNV<16, gl_ScopeSubgroup, 16, 16>(1. / 20.);
    B = fcoopmatNV<16, gl_ScopeSubgroup, 16, 16>(1. / 21.);
    C = fcoopmatNV<16, gl_ScopeSubgroup, 16, 16>(1. / 22.);

    for (int i = 0; i < 100*1000 / 48; i++) {
        [[unroll]] for (int j = 0; j < 10; j++) {
            C = coopMatMulAddNV(A, B, C);
            A = coopMatMulAddNV(C, A, B);
            B = coopMatMulAddNV(B, C, A);
        }
    }

    if (any(greaterThanEqual(ipos, imageSize(img_out)))) return;
    vec3 rgb = texelFetch(img_in, ipos, 0).rgb * float(A[0] + B[0] + C[0]);
    imageStore(img_out, ipos, vec4(rgb, 1));
}
